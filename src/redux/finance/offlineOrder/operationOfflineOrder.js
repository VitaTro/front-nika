import { createAsyncThunk } from "@reduxjs/toolkit";
import axios from "../../axiosConfig";

export const fetchOfflineOrders = createAsyncThunk(
  "offlineOrders/fetchOfflineOrders",
  async (_, { rejectWithValue }) => {
    try {
      const response = await axios.get("/api/admin/finance/offline/orders");
      console.log("üìä API Response:", response.data); // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É

      return Array.isArray(response.data) ? response.data : []; // üî• –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ —Ü–µ –º–∞—Å–∏–≤
    } catch (error) {
      console.error("‚ùå API Error:", error.response.data);
      return rejectWithValue(error.response.data);
    }
  }
);

export const createOfflineOrder = createAsyncThunk(
  "offlineOrders/createOfflineOrder",
  async (newOrderData, { rejectWithValue }) => {
    try {
      console.log(
        "üì° Sending createOfflineOrder request:",
        JSON.stringify(newOrderData, null, 2)
      );
      const response = await axios.post(
        "/api/admin/finance/offline/orders",
        newOrderData,
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      console.log(
        "‚úÖ createOfflineOrder API RESPONSE:",
        JSON.stringify(response.data, null, 2)
      );
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå API Error:",
        JSON.stringify(error.response.data, null, 2)
      );
      return rejectWithValue(error.response.data);
    }
  }
);

// ‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
export const updateOfflineOrderStatus = createAsyncThunk(
  "offlineOrders/updateOfflineOrderStatus",
  async ({ orderId, status }, { rejectWithValue }) => {
    try {
      const response = await axios.patch(
        `/api/admin/finance/offline/orders/${orderId}`,
        { status } // üî• –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ª–∏—à–µ —Å—Ç–∞—Ç—É—Å
      );
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);
