import {
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  MenuItem,
  Select,
  TextField,
} from "@mui/material";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  fetchOfflineSales,
  updateOfflineSale,
} from "../../../../../redux/finance/offlineSale/operationOfflineSale";
import {
  selectOfflineSales,
  selectOfflineSalesError,
  selectOfflineSalesLoading,
} from "../../../../../redux/finance/offlineSale/selectorsOfflineSale";

const OfflineSale = () => {
  const dispatch = useDispatch();
  const offlineSales = useSelector(selectOfflineSales);
  const loading = useSelector(selectOfflineSalesLoading);
  const error = useSelector(selectOfflineSalesError);

  const [selectedSale, setSelectedSale] = useState(null);
  const [updatedSaleData, setUpdatedSaleData] = useState({});

  useEffect(() => {
    dispatch(fetchOfflineSales());
  }, [dispatch]);

  const handleUpdateSale = () => {
    if (!selectedSale) return;

    const updatedData = {
      totalAmount: updatedSaleData.totalAmount || selectedSale.totalAmount,
      paymentMethod:
        updatedSaleData.paymentMethod || selectedSale.paymentMethod,
      status: updatedSaleData.status || selectedSale.status,
    };

    console.log("üîç –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:", updatedData);
    dispatch(updateOfflineSale(selectedSale._id, updatedData));
    setSelectedSale(null);
  };

  if (loading) return <p>üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤...</p>;
  if (error) return <p>‚ùå –ü–æ–º–∏–ª–∫–∞: {error}</p>;

  return (
    <div>
      <h2>üè™ –û—Ñ–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂—ñ</h2>

      {offlineSales.map((sale) => (
        <div
          key={sale._id}
          style={{
            border: "1px solid black",
            padding: "10px",
            marginBottom: "10px",
          }}
        >
          <h3>–ü—Ä–æ–¥–∞–∂ ID: {sale._id}</h3>
          <p>–°—Ç–∞—Ç—É—Å: {sale.status}</p>
          <p>–°—É–º–∞: {sale.totalAmount} z≈Ç</p>
          <p>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏: {sale.paymentMethod}</p>
          <p>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {sale.products.length}</p>
          <Button variant="contained" onClick={() => setSelectedSale(sale)}>
            üîÑ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
          </Button>
        </div>
      ))}

      {/* üî• –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É */}
      {selectedSale && (
        <Dialog open={true} onClose={() => setSelectedSale(null)}>
          <DialogTitle>üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ–¥–∞–∂</DialogTitle>
          <DialogContent>
            <TextField
              label="–°—É–º–∞ (z≈Ç)"
              type="number"
              fullWidth
              margin="normal"
              value={updatedSaleData.totalAmount || selectedSale.totalAmount}
              onChange={(e) =>
                setUpdatedSaleData({
                  ...updatedSaleData,
                  totalAmount: e.target.value,
                })
              }
            />
            <Select
              fullWidth
              margin="normal"
              value={
                updatedSaleData.paymentMethod || selectedSale.paymentMethod
              }
              onChange={(e) =>
                setUpdatedSaleData({
                  ...updatedSaleData,
                  paymentMethod: e.target.value,
                })
              }
            >
              <MenuItem value="cash">–ì–æ—Ç—ñ–≤–∫–∞</MenuItem>
              <MenuItem value="bank_transfer">–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π –ø–µ—Ä–µ–∫–∞–∑</MenuItem>
              <MenuItem value="card">–ö–∞—Ä—Ç–∞</MenuItem>
            </Select>
            <Select
              fullWidth
              margin="normal"
              value={updatedSaleData.status || selectedSale.status}
              onChange={(e) =>
                setUpdatedSaleData({
                  ...updatedSaleData,
                  status: e.target.value,
                })
              }
            >
              <MenuItem value="pending">‚è≥ –û—á—ñ–∫—É—î—Ç—å—Å—è</MenuItem>
              <MenuItem value="completed">‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ</MenuItem>
              <MenuItem value="cancelled">‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ</MenuItem>
            </Select>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setSelectedSale(null)} color="error">
              ‚ùå –ó–∞–∫—Ä–∏—Ç–∏
            </Button>
            <Button onClick={handleUpdateSale} variant="contained">
              ‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏
            </Button>
          </DialogActions>
        </Dialog>
      )}
    </div>
  );
};

export default OfflineSale;
