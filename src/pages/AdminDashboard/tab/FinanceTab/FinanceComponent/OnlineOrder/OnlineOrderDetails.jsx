import {
  Button,
  Checkbox,
  Chip,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from "@mui/material";
import React, { useState } from "react";
import { useDispatch } from "react-redux";
import {
  returnOnlineOrder,
  updateOnlineOrder,
} from "../../../../../../redux/finance/onlineOrder/operationOnlineOrder";
import MissingProductModal from "./MissingProductModal";

const OnlineOrderDetails = ({ order, onClose }) => {
  const [missingProduct, setMissingProduct] = useState(null);
  const dispatch = useDispatch();
  const [checkedItems, setCheckedItems] = useState(
    order?.products?.reduce((acc, item) => {
      const productId = item.productId?._id || item._id || `unknown_product`;

      acc[productId] = false;

      return acc;
    }, {}) || {}
  );

  // ‚úÖ –§—É–Ω–∫—Ü—ñ—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
  const handleToggle = (productId) => {
    setCheckedItems((prev) => ({ ...prev, [productId]: !prev[productId] }));
  };

  // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑—ñ–±—Ä–∞–Ω—ñ
  const allItemsChecked = Object.values(checkedItems).every(Boolean);

  // ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ "assembled"
  const handleConfirmAssembly = () => {
    dispatch(updateOnlineOrder(order._id, { status: "assembled" }));
    onClose();
  };

  // ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –Ω–∞ "shipped" –∞–±–æ "ready_for_pickup"
  const handleConfirmShipment = () => {
    let nextStatus =
      order.deliveryType === "pickup" ? "ready_for_pickup" : "shipped";
    dispatch(updateOnlineOrder(order._id, { status: nextStatus }));
    onClose();
  };

  // ‚úÖ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const handleReturnOrder = () => {
    dispatch(returnOnlineOrder(order._id, { reason: "–ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–º–æ–≤–∏–≤—Å—è" }));
    onClose();
  };

  return (
    <Dialog open={!!order} onClose={onClose} maxWidth="md">
      <DialogTitle>üì¶ –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ({order.status})</DialogTitle>

      <DialogContent>
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>‚úÖ –ó—ñ–±—Ä–∞–Ω–æ?</TableCell>
                <TableCell>–§–æ—Ç–æ</TableCell>
                <TableCell>–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É</TableCell>
                <TableCell>–ö—ñ–ª—å–∫—ñ—Å—Ç—å</TableCell>
                <TableCell>–î—ñ—è</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {order.products.map((item) => {
                const productId =
                  item?.productId?._id || item?._id || `unknown_product`;

                return (
                  <TableRow key={productId}>
                    <TableCell>
                      {item?.productId ? (
                        <Checkbox
                          checked={checkedItems[productId]}
                          onChange={() => handleToggle(productId)}
                          color="success"
                        />
                      ) : (
                        <Chip
                          label="‚ùå –ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"
                          color="error"
                          onClick={() => setMissingProduct(item)}
                        />
                      )}
                    </TableCell>
                    <TableCell>
                      <img
                        src={
                          item?.productId?.photoUrl ||
                          item?.photoUrl ||
                          "placeholder.jpg"
                        }
                        alt={
                          item?.productId?.name ||
                          item?.name ||
                          "–¢–æ–≤–∞—Ä –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
                        }
                        width="50"
                        style={{ borderRadius: "5px" }}
                      />
                    </TableCell>
                    <TableCell>
                      {item?.productId?.name || item?.name || "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä"}
                    </TableCell>
                    <TableCell>{item?.quantity || "?"}</TableCell>
                    <TableCell>
                      {item?.productId ? null : (
                        <Button
                          variant="contained"
                          color="error"
                          onClick={() => setMissingProduct(item)}
                        >
                          ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏
                        </Button>
                      )}
                    </TableCell>
                  </TableRow>
                );
              })}
            </TableBody>
          </Table>
        </TableContainer>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} color="error">
          ‚ùå –ó–∞–∫—Ä–∏—Ç–∏
        </Button>
      </DialogActions>

      {/* ‚úÖ –Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–µ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –≤—ñ–¥—Å—É—Ç–Ω—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É */}
      <MissingProductModal
        open={!!missingProduct}
        onClose={() => setMissingProduct(null)}
        missingProduct={missingProduct}
        onConfirm={(product, comment) => {
          console.log(
            `‚úÖ –í–Ω–µ—Å–µ–Ω–æ –∑–º—ñ–Ω–∏ –¥–ª—è: ${
              product?.name || "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä"
            } –ö–æ–º–µ–Ω—Ç–∞—Ä: ${comment}`
          );
          setMissingProduct(null);
        }}
      />
    </Dialog>
  );
};

export default OnlineOrderDetails;
